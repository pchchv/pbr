// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: types.proto

package testmsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Scalar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flt           float32                `protobuf:"fixed32,1,opt,name=flt,proto3" json:"flt,omitempty"`
	Dbl           float64                `protobuf:"fixed64,2,opt,name=dbl,proto3" json:"dbl,omitempty"`
	I32           int32                  `protobuf:"varint,3,opt,name=i32,proto3" json:"i32,omitempty"`
	I64           int64                  `protobuf:"varint,4,opt,name=i64,proto3" json:"i64,omitempty"`
	U32           uint32                 `protobuf:"varint,5,opt,name=u32,proto3" json:"u32,omitempty"`
	U64           uint64                 `protobuf:"varint,6,opt,name=u64,proto3" json:"u64,omitempty"`
	S32           int32                  `protobuf:"zigzag32,7,opt,name=s32,proto3" json:"s32,omitempty"`
	S64           int64                  `protobuf:"zigzag64,8,opt,name=s64,proto3" json:"s64,omitempty"`
	F32           uint32                 `protobuf:"fixed32,9,opt,name=f32,proto3" json:"f32,omitempty"`
	F64           uint64                 `protobuf:"fixed64,10,opt,name=f64,proto3" json:"f64,omitempty"`
	Sf32          int32                  `protobuf:"fixed32,11,opt,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64          int64                  `protobuf:"fixed64,12,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Bool          bool                   `protobuf:"varint,13,opt,name=bool,proto3" json:"bool,omitempty"`
	Str           string                 `protobuf:"bytes,14,opt,name=str,proto3" json:"str,omitempty"`
	Byte          []byte                 `protobuf:"bytes,15,opt,name=byte,proto3" json:"byte,omitempty"`
	After         bool                   `protobuf:"varint,32,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scalar) Reset() {
	*x = Scalar{}
	mi := &file_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalar) ProtoMessage() {}

func (x *Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalar.ProtoReflect.Descriptor instead.
func (*Scalar) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *Scalar) GetFlt() float32 {
	if x != nil {
		return x.Flt
	}
	return 0
}

func (x *Scalar) GetDbl() float64 {
	if x != nil {
		return x.Dbl
	}
	return 0
}

func (x *Scalar) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *Scalar) GetI64() int64 {
	if x != nil {
		return x.I64
	}
	return 0
}

func (x *Scalar) GetU32() uint32 {
	if x != nil {
		return x.U32
	}
	return 0
}

func (x *Scalar) GetU64() uint64 {
	if x != nil {
		return x.U64
	}
	return 0
}

func (x *Scalar) GetS32() int32 {
	if x != nil {
		return x.S32
	}
	return 0
}

func (x *Scalar) GetS64() int64 {
	if x != nil {
		return x.S64
	}
	return 0
}

func (x *Scalar) GetF32() uint32 {
	if x != nil {
		return x.F32
	}
	return 0
}

func (x *Scalar) GetF64() uint64 {
	if x != nil {
		return x.F64
	}
	return 0
}

func (x *Scalar) GetSf32() int32 {
	if x != nil {
		return x.Sf32
	}
	return 0
}

func (x *Scalar) GetSf64() int64 {
	if x != nil {
		return x.Sf64
	}
	return 0
}

func (x *Scalar) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *Scalar) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *Scalar) GetByte() []byte {
	if x != nil {
		return x.Byte
	}
	return nil
}

func (x *Scalar) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type Repeated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flt           []float32              `protobuf:"fixed32,1,rep,packed,name=flt,proto3" json:"flt,omitempty"`
	Dbl           []float64              `protobuf:"fixed64,2,rep,packed,name=dbl,proto3" json:"dbl,omitempty"`
	I32           []int32                `protobuf:"varint,3,rep,packed,name=i32,proto3" json:"i32,omitempty"`
	I64           []int64                `protobuf:"varint,4,rep,packed,name=i64,proto3" json:"i64,omitempty"`
	U32           []uint32               `protobuf:"varint,5,rep,packed,name=u32,proto3" json:"u32,omitempty"`
	U64           []uint64               `protobuf:"varint,6,rep,packed,name=u64,proto3" json:"u64,omitempty"`
	S32           []int32                `protobuf:"zigzag32,7,rep,packed,name=s32,proto3" json:"s32,omitempty"`
	S64           []int64                `protobuf:"zigzag64,8,rep,packed,name=s64,proto3" json:"s64,omitempty"`
	F32           []uint32               `protobuf:"fixed32,9,rep,packed,name=f32,proto3" json:"f32,omitempty"`
	F64           []uint64               `protobuf:"fixed64,10,rep,packed,name=f64,proto3" json:"f64,omitempty"`
	Sf32          []int32                `protobuf:"fixed32,11,rep,packed,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64          []int64                `protobuf:"fixed64,12,rep,packed,name=sf64,proto3" json:"sf64,omitempty"`
	Bool          []bool                 `protobuf:"varint,13,rep,packed,name=bool,proto3" json:"bool,omitempty"`
	Str           []string               `protobuf:"bytes,14,rep,name=str,proto3" json:"str,omitempty"`
	Byte          [][]byte               `protobuf:"bytes,15,rep,name=byte,proto3" json:"byte,omitempty"`
	After         bool                   `protobuf:"varint,32,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Repeated) Reset() {
	*x = Repeated{}
	mi := &file_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Repeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repeated) ProtoMessage() {}

func (x *Repeated) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repeated.ProtoReflect.Descriptor instead.
func (*Repeated) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *Repeated) GetFlt() []float32 {
	if x != nil {
		return x.Flt
	}
	return nil
}

func (x *Repeated) GetDbl() []float64 {
	if x != nil {
		return x.Dbl
	}
	return nil
}

func (x *Repeated) GetI32() []int32 {
	if x != nil {
		return x.I32
	}
	return nil
}

func (x *Repeated) GetI64() []int64 {
	if x != nil {
		return x.I64
	}
	return nil
}

func (x *Repeated) GetU32() []uint32 {
	if x != nil {
		return x.U32
	}
	return nil
}

func (x *Repeated) GetU64() []uint64 {
	if x != nil {
		return x.U64
	}
	return nil
}

func (x *Repeated) GetS32() []int32 {
	if x != nil {
		return x.S32
	}
	return nil
}

func (x *Repeated) GetS64() []int64 {
	if x != nil {
		return x.S64
	}
	return nil
}

func (x *Repeated) GetF32() []uint32 {
	if x != nil {
		return x.F32
	}
	return nil
}

func (x *Repeated) GetF64() []uint64 {
	if x != nil {
		return x.F64
	}
	return nil
}

func (x *Repeated) GetSf32() []int32 {
	if x != nil {
		return x.Sf32
	}
	return nil
}

func (x *Repeated) GetSf64() []int64 {
	if x != nil {
		return x.Sf64
	}
	return nil
}

func (x *Repeated) GetBool() []bool {
	if x != nil {
		return x.Bool
	}
	return nil
}

func (x *Repeated) GetStr() []string {
	if x != nil {
		return x.Str
	}
	return nil
}

func (x *Repeated) GetByte() [][]byte {
	if x != nil {
		return x.Byte
	}
	return nil
}

func (x *Repeated) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type Packed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Flt           []float32              `protobuf:"fixed32,1,rep,packed,name=flt,proto3" json:"flt,omitempty"`
	Dbl           []float64              `protobuf:"fixed64,2,rep,packed,name=dbl,proto3" json:"dbl,omitempty"`
	I32           []int32                `protobuf:"varint,3,rep,packed,name=i32,proto3" json:"i32,omitempty"`
	I64           []int64                `protobuf:"varint,4,rep,packed,name=i64,proto3" json:"i64,omitempty"`
	U32           []uint32               `protobuf:"varint,5,rep,packed,name=u32,proto3" json:"u32,omitempty"`
	U64           []uint64               `protobuf:"varint,6,rep,packed,name=u64,proto3" json:"u64,omitempty"`
	S32           []int32                `protobuf:"zigzag32,7,rep,packed,name=s32,proto3" json:"s32,omitempty"`
	S64           []int64                `protobuf:"zigzag64,8,rep,packed,name=s64,proto3" json:"s64,omitempty"`
	F32           []uint32               `protobuf:"fixed32,9,rep,packed,name=f32,proto3" json:"f32,omitempty"`
	F64           []uint64               `protobuf:"fixed64,10,rep,packed,name=f64,proto3" json:"f64,omitempty"`
	Sf32          []int32                `protobuf:"fixed32,11,rep,packed,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64          []int64                `protobuf:"fixed64,12,rep,packed,name=sf64,proto3" json:"sf64,omitempty"`
	Bool          []bool                 `protobuf:"varint,13,rep,packed,name=bool,proto3" json:"bool,omitempty"`
	Str           []string               `protobuf:"bytes,14,rep,name=str,proto3" json:"str,omitempty"`
	Byte          [][]byte               `protobuf:"bytes,15,rep,name=byte,proto3" json:"byte,omitempty"`
	After         bool                   `protobuf:"varint,32,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packed) Reset() {
	*x = Packed{}
	mi := &file_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packed) ProtoMessage() {}

func (x *Packed) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packed.ProtoReflect.Descriptor instead.
func (*Packed) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *Packed) GetFlt() []float32 {
	if x != nil {
		return x.Flt
	}
	return nil
}

func (x *Packed) GetDbl() []float64 {
	if x != nil {
		return x.Dbl
	}
	return nil
}

func (x *Packed) GetI32() []int32 {
	if x != nil {
		return x.I32
	}
	return nil
}

func (x *Packed) GetI64() []int64 {
	if x != nil {
		return x.I64
	}
	return nil
}

func (x *Packed) GetU32() []uint32 {
	if x != nil {
		return x.U32
	}
	return nil
}

func (x *Packed) GetU64() []uint64 {
	if x != nil {
		return x.U64
	}
	return nil
}

func (x *Packed) GetS32() []int32 {
	if x != nil {
		return x.S32
	}
	return nil
}

func (x *Packed) GetS64() []int64 {
	if x != nil {
		return x.S64
	}
	return nil
}

func (x *Packed) GetF32() []uint32 {
	if x != nil {
		return x.F32
	}
	return nil
}

func (x *Packed) GetF64() []uint64 {
	if x != nil {
		return x.F64
	}
	return nil
}

func (x *Packed) GetSf32() []int32 {
	if x != nil {
		return x.Sf32
	}
	return nil
}

func (x *Packed) GetSf64() []int64 {
	if x != nil {
		return x.Sf64
	}
	return nil
}

func (x *Packed) GetBool() []bool {
	if x != nil {
		return x.Bool
	}
	return nil
}

func (x *Packed) GetStr() []string {
	if x != nil {
		return x.Str
	}
	return nil
}

func (x *Packed) GetByte() [][]byte {
	if x != nil {
		return x.Byte
	}
	return nil
}

func (x *Packed) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type Parent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Child         *Child                 `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	After         bool                   `protobuf:"varint,32,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Parent) Reset() {
	*x = Parent{}
	mi := &file_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Parent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parent) ProtoMessage() {}

func (x *Parent) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parent.ProtoReflect.Descriptor instead.
func (*Parent) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *Parent) GetChild() *Child {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *Parent) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type Child struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Number        int64                  `protobuf:"varint,100,opt,name=number,proto3" json:"number,omitempty"`
	Grandchild    []*Grandchild          `protobuf:"bytes,200,rep,name=grandchild,proto3" json:"grandchild,omitempty"`
	Numbers       []int64                `protobuf:"varint,300,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
	After         bool                   `protobuf:"varint,3200,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Child) Reset() {
	*x = Child{}
	mi := &file_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Child) ProtoMessage() {}

func (x *Child) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Child.ProtoReflect.Descriptor instead.
func (*Child) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *Child) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Child) GetGrandchild() []*Grandchild {
	if x != nil {
		return x.Grandchild
	}
	return nil
}

func (x *Child) GetNumbers() []int64 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *Child) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type Grandchild struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Number        int64                  `protobuf:"varint,1000,opt,name=number,proto3" json:"number,omitempty"`
	Numbers       []int64                `protobuf:"varint,2000,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
	After         bool                   `protobuf:"varint,32000,opt,name=after,proto3" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Grandchild) Reset() {
	*x = Grandchild{}
	mi := &file_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Grandchild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grandchild) ProtoMessage() {}

func (x *Grandchild) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grandchild.ProtoReflect.Descriptor instead.
func (*Grandchild) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *Grandchild) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Grandchild) GetNumbers() []int64 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *Grandchild) GetAfter() bool {
	if x != nil {
		return x.After
	}
	return false
}

type Customer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Orders        []*Order               `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	FavoriteIds   []int64                `protobuf:"varint,4,rep,packed,name=favorite_ids,json=favoriteIds,proto3" json:"favorite_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Customer) Reset() {
	*x = Customer{}
	mi := &file_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *Customer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Customer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Customer) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *Customer) GetFavoriteIds() []int64 {
	if x != nil {
		return x.FavoriteIds
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Open          bool                   `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
	Items         []*Item                `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Order) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // a big object
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x6d, 0x73, 0x67, 0x22, 0xb4, 0x02, 0x0a, 0x06, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x66, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x62, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x64, 0x62, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33, 0x32,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x73, 0x33, 0x32, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x73, 0x36,
	0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03,
	0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66, 0x33, 0x32, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x04, 0x73, 0x66, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66, 0x36,
	0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x04, 0x73, 0x66, 0x36, 0x34, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x79, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xb6, 0x02,
	0x0a, 0x08, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x03, 0x66, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x62, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x03, 0x64, 0x62, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x33, 0x32,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x33, 0x32, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x11, 0x52, 0x03, 0x73, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x36, 0x34, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x12, 0x52, 0x03, 0x73, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33,
	0x32, 0x18, 0x09, 0x20, 0x03, 0x28, 0x07, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x06, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x66, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x04, 0x73, 0x66,
	0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x10,
	0x52, 0x04, 0x73, 0x66, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74,
	0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x79, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x79, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xe8, 0x02, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x03, 0x66, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x66, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x64, 0x62, 0x6c, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x64, 0x62, 0x6c, 0x12, 0x14, 0x0a,
	0x03, 0x69, 0x33, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03,
	0x69, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x03, 0x75, 0x33, 0x32,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12,
	0x14, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x03, 0x73, 0x33, 0x32, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x73, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x03, 0x73,
	0x36, 0x34, 0x18, 0x08, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x73, 0x36,
	0x34, 0x12, 0x14, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x09, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x16, 0x0a,
	0x04, 0x73, 0x66, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x73, 0x66, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x04, 0x73, 0x66, 0x36, 0x34, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x10, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x73, 0x66, 0x36, 0x34, 0x12, 0x16, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x08, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x79, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x22, 0x44, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x72, 0x61,
	0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x73, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12,
	0x19, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0xac, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x80, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x22, 0x5c, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12,
	0x17, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0xd0, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x80, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22,
	0x85, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x6d,
	0x73, 0x67, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x66, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x73, 0x67, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x16, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x73, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData []byte
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_types_proto_rawDesc), len(file_types_proto_rawDesc)))
	})
	return file_types_proto_rawDescData
}

var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_types_proto_goTypes = []any{
	(*Scalar)(nil),     // 0: testmsg.Scalar
	(*Repeated)(nil),   // 1: testmsg.Repeated
	(*Packed)(nil),     // 2: testmsg.Packed
	(*Parent)(nil),     // 3: testmsg.Parent
	(*Child)(nil),      // 4: testmsg.Child
	(*Grandchild)(nil), // 5: testmsg.Grandchild
	(*Customer)(nil),   // 6: testmsg.Customer
	(*Order)(nil),      // 7: testmsg.Order
	(*Item)(nil),       // 8: testmsg.Item
}
var file_types_proto_depIdxs = []int32{
	4, // 0: testmsg.Parent.child:type_name -> testmsg.Child
	5, // 1: testmsg.Child.grandchild:type_name -> testmsg.Grandchild
	7, // 2: testmsg.Customer.orders:type_name -> testmsg.Order
	8, // 3: testmsg.Order.items:type_name -> testmsg.Item
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_types_proto_rawDesc), len(file_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
